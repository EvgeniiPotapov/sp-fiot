/* ----------------------------------------------------------------------------------------------- */
/*  Copyright (c) 2018 by Axel Kenzo, axelkenzo@mail.ru                                            */
/*                                                                                                 */
/*  Разрешается повторное распространение и использование как в виде исходного кода, так и         */
/*  в двоичной форме, с изменениями или без, при соблюдении следующих условий:                     */
/*                                                                                                 */
/*   1. При повторном распространении исходного кода должно оставаться указанное выше уведомление  */
/*      об авторском праве, этот список условий и последующий отказ от гарантий.                   */
/*   2. При повторном распространении двоичного кода должна сохраняться указанная выше информация  */
/*      об авторском праве, этот список условий и последующий отказ от гарантий в документации     */
/*      и/или в других материалах, поставляемых при распространении.                               */
/*   3. Ни имя владельца авторских прав, ни имена его соратников не могут быть использованы в      */
/*      качестве рекламы или средства продвижения продуктов, основанных на этом ПО без             */
/*      предварительного письменного разрешения.                                                   */
/*                                                                                                 */
/*  ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ "КАК ОНА ЕСТЬ"  */
/*  БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ             */
/*  ОГРАНИЧИВАЯСЬ ИМИ, ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ */
/*  ЦЕЛИ. НИ В КОЕМ СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ    */
/*  ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ              */
/*  ОТВЕТСТВЕННОСТИ, ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ,         */
/*  ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ (ВКЛЮЧАЯ, НО НЕ             */
/*  ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ ПРИНЕСЕННЫМИ   */
/*  ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ),    */
/*  ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.            */
/*                                                                                                 */
/*   ak_aead.h                                                                                     */
/* ----------------------------------------------------------------------------------------------- */
#ifndef    __AK_AEAD_H__
#define    __AK_AEAD_H__

/* ----------------------------------------------------------------------------------------------- */
 #include <ak_bckey.h>

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Умножение двух элементов поля \f$ \mathbb F_{2^{64}}\f$. */
 void ak_gf64_mul_uint64( ak_pointer z, ak_pointer x, ak_pointer y );
/*! \brief Умножение двух элементов поля \f$ \mathbb F_{2^{128}}\f$. */
 void ak_gf128_mul_uint64( ak_pointer z, ak_pointer x, ak_pointer y );

#ifdef LIBAKRYPT_HAVE_BUILTIN_CLMULEPI64
/*! \brief Умножение двух элементов поля \f$ \mathbb F_{2^{64}}\f$. */
 void ak_gf64_mul_pcmulqdq( ak_pointer z, ak_pointer x, ak_pointer y );
/*! \brief Умножение двух элементов поля \f$ \mathbb F_{2^{128}}\f$. */
 void ak_gf128_mul_pcmulqdq( ak_pointer z, ak_pointer a, ak_pointer b );

 #define ak_gf64_mul ak_gf64_mul_pcmulqdq
 #define ak_gf128_mul ak_gf128_mul_pcmulqdq
#else
 #define ak_gf64_mul ak_gf64_mul_uint64
 #define ak_gf128_mul ak_gf128_mul_uint64
#endif

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Структура, содержащая текущее состояние режима шифрования с одновременной выработкой имитовставки */
 typedef struct mgm_ctx {
  /*! \brief Текущее значение имитовставки. */
   ak_uint128 sum;
  /*! \brief Значение произведения в конечном поле. */
   ak_uint128 mulres;
  /*! \brief Счетчик, значения которого используются при шифровании информации. */
   ak_uint128 ycount;
  /*! \brief Счетчик, значения которого используются при выработке имитовставки. */
   ak_uint128 zcount;
  /*! \brief Значение шифрующей гаммы. */
   ak_uint128 e;
  /*! \brief Значение зашифрованного счетчика. */
   ak_uint128 h;
  /*! \brief Размер обработанных зашифровываемых/расшифровываемых данных в битах. */
   ak_uint64 pbitlen;
  /*! \brief Размер обработанных дополнительных данных в битах. */
   ak_uint64 abitlen;
  /*! \brief Флаги, устанавливаемые при шифровании данных. */
   ak_uint8 pflag;
  /*! \brief Флаги, устанавливаемые при вычислении имитовставки. */
   ak_uint8 aflag;
} *ak_mgm_ctx;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Инициализация начального значения счетчика для вычисления имитовставки. */
 int ak_mgm_context_authentication_clean( ak_mgm_ctx , ak_bckey , const ak_pointer , const size_t );
/*! \brief Изменение внутреннего состояния счетчика при вычисления имитовставки. */
 int ak_mgm_context_authentication_update( ak_mgm_ctx, ak_bckey , const ak_pointer , const size_t );
/*! \brief Инициализация начального значения счетчика для шифрования. */
 int ak_mgm_context_encryption_clean( ak_mgm_ctx , ak_bckey , const ak_pointer , const size_t );
/*! \brief Зашифрование данных и обновление внутреннего состояния счетчика для шифрования. */
 int ak_mgm_context_encryption_update( ak_mgm_ctx , ak_bckey ,
                                          ak_bckey , const ak_pointer , ak_pointer , const size_t );
/*! \brief Расшифрование данных и обновление внутреннего состояния счетчика для шифрования. */
 int ak_mgm_context_decryption_update( ak_mgm_ctx , ak_bckey ,
                                          ak_bckey , const ak_pointer , ak_pointer , const size_t );
/*! \brief Завершение действий и вычисление имитовставки. */
 ak_buffer ak_mgm_context_authentication_finalize( ak_mgm_ctx , ak_bckey , ak_pointer, const size_t );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Зашифрование данных в режиме MGM с одновременной выработкой имитовставки. */
 ak_buffer ak_bckey_context_encrypt_mgm( ak_bckey , ak_bckey , const ak_pointer , const size_t ,
                   const ak_pointer , ak_pointer , const size_t , const ak_pointer , const size_t ,
                                                                         ak_pointer , const size_t );

/*! \brief Расшифрование данных в режиме MGM с одновременной проверкой имитовставки. */
 ak_bool ak_bckey_context_decrypt_mgm( ak_bckey , ak_bckey , const ak_pointer , const size_t ,
                   const ak_pointer , ak_pointer , const size_t , const ak_pointer , const size_t ,
                                                                          ak_pointer, const size_t );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Тестирование арифметических операций в конечных полях характеристики 2. */
 ak_bool ak_gfn_multiplication_test( void );
/*! \brief Тестирование корректной работы режима блочного шифрования с одновременной выработкой имитовставки. */
 ak_bool ak_bckey_test_mgm( void );

#endif
/* ----------------------------------------------------------------------------------------------- */
/*                                                                                      ak_aead.h  */
/* ----------------------------------------------------------------------------------------------- */
