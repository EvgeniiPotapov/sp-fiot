/* ----------------------------------------------------------------------------------------------- */
/*  Copyright (c) 2014 - 2018 by Axel Kenzo, axelkenzo@mail.ru                                     */
/*                                                                                                 */
/*  Разрешается повторное распространение и использование как в виде исходного кода, так и         */
/*  в двоичной форме, с изменениями или без, при соблюдении следующих условий:                     */
/*                                                                                                 */
/*   1. При повторном распространении исходного кода должно оставаться указанное выше уведомление  */
/*      об авторском праве, этот список условий и последующий отказ от гарантий.                   */
/*   2. При повторном распространении двоичного кода должна сохраняться указанная выше информация  */
/*      об авторском праве, этот список условий и последующий отказ от гарантий в документации     */
/*      и/или в других материалах, поставляемых при распространении.                               */
/*   3. Ни имя владельца авторских прав, ни имена его соратников не могут быть использованы в      */
/*      качестве рекламы или средства продвижения продуктов, основанных на этом ПО без             */
/*      предварительного письменного разрешения.                                                   */
/*                                                                                                 */
/*  ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ "КАК ОНА ЕСТЬ"  */
/*  БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ             */
/*  ОГРАНИЧИВАЯСЬ ИМИ, ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ */
/*  ЦЕЛИ. НИ В КОЕМ СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ    */
/*  ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ              */
/*  ОТВЕТСТВЕННОСТИ, ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ,         */
/*  ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ (ВКЛЮЧАЯ, НО НЕ             */
/*  ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ ПРИНЕСЕННЫМИ   */
/*  ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ),    */
/*  ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.            */
/*                                                                                                 */
/*  ak_mac.h                                                                                       */
/* ----------------------------------------------------------------------------------------------- */
#ifndef __AK_MAC_H__
#define __AK_MAC_H__

/* ----------------------------------------------------------------------------------------------- */
 #include <ak_sign.h>
 #include <ak_aead.h>

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Секретный ключ алгоритма выработки имитовставки HMAC. */
/*!  Алгоритм выработки имитовставки HMAC основан на двукратном применении бесключевой функции
     хеширования. Алгоритм описывается рекомендациями IETF RFC 2104 и
     стандартизован отечественными рекомендациями по стандартизации Р 50.1.113-2016.
     Алгоритм предназначен, в основном, для выработки имитовставки и
     преобразования ключевой информации.

     В нашей реализации алгоритм может быть использован совместно с любой функцией хеширования,
     реализованной в библиотеке. Отметим, что согласно Р 50.1.113-2016 алгоритм рекомендуется
     использовать только совместно с функцией хеширования Стрибог
     (с длиной хеш кода как 256 бит, так и 512 бит).                                               */
/* ----------------------------------------------------------------------------------------------- */
 typedef struct hmac {
 /*! \brief контекст секретного ключа */
  struct skey key;
 /*! \brief контекст функции хеширования */
  struct hash ctx;
} *ak_hmac;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Секретный ключ алгоритма выработки имитовставки на основе AEAD алгоритма. */
/*!  Данный алгоритм выработки имитовставки входит в качестве составной части в режим блочного
     шифрования с возможностью одновременного вычисления имитовставки. Полный функционал алгоритма
     реализуется в библиотеке при помощи функции ak_bckey_context_encrypt_mgm(). Данный класс
     предоставляет возможность вычислять имитовставку без зашифрования какой либо информации.      */
/* ----------------------------------------------------------------------------------------------- */
 typedef struct mgm {
 /*! \brief контекст секретного ключа блочного алгоритма шифрования */
  struct bckey bkey;
 /*! \brief контекст алгоритма mgm */
  struct mgm_ctx ctx;
} *ak_mgm;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Секретный ключ алгоритма выработки имитовставки согласно ГОСТ Р 34.13-2015. */
 typedef struct imgost {
 /*! \brief контекст секретного ключа блочного алгоритма шифрования */
  struct bckey bkey;
 } *ak_imgost;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Тип алгоритма выработки имитовставки. */
/*! В качестве алгоритма выработки имитовставки может выступать
     - алгоритм hmac на основе любой реализованной в библиотеке функции хеширования,
     - алгоритм, регламентируемый ГОСТ Р 34.13-2015, с использованием любого реализованного
       в библиотеке блочного шифра,
     - алгоритм вычисления имитовставки при помощи MGM-режима (режима блочного шифрования с
       возможностью одновременного вычисления имитовставки) с использованием  любого
       реализованного в библиотеке блочного шифра,
     - алгоритм электронной подписи, регламентируемый ГОСТ Р 34.12-2012, с использованием любого
       реализованного в библиотеке набора параметров эллиптической кривой. */
/* ----------------------------------------------------------------------------------------------- */
 typedef enum {
  /*! \brief тип алгоритма не определен */
   type_undefined,
  /*! \brief имитовставка вычисляется с помощью алгоритма hmac */
   type_hmac,
  /*! \brief имитовставка вычисляется в соответствии с ГОСТ Р 34.13-2015 */
   type_imgost,
  /*! \brief имитовставка вычисляется при помощи режима MGM (режима работы блочного шифра с
                                               возможностью одновременной выработки имитовставки). */
   type_mgm,
  /*! \brief имитовставка вычисляется при помощи электронной подписи. */
   type_signify
 } mac_type;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Ключ алгоритма выработки имитовставки. */
 typedef struct mac {
  /*! \brief тип алгоритма выработки имитовставки */
   mac_type type;
  /*! \brief контекст алгоритма */
   union {
    /*! \brief алгоритм hmac */
     struct hmac _hmac;
    /*! \brief алгоритм на основе блочного шифра, регламентируемый ГОСТ 34.13-2015 */
     struct imgost _imgost;
    /*! \brief алгоритм на основе mgm-алгоритма. */
     struct mgm _mgm;
    /*! \brief электронная подпись */
     struct signkey _signkey;
   } choice;
  /*! \brief длина блока обрабатываемых данных */
   size_t bsize;
  /*! \brief длина имитовставки (в байтах) */
   size_t hsize;
  /*! \brief функция очистки контекста */
   ak_function_mac_clean *clean;
  /*! \brief функция обновления состояния контекста */
   ak_function_mac_update *update;
  /*! \brief функция завершения вычислений и получения конечного результата */
   ak_function_mac_finalize *finalize;

 } *ak_mac;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Функция создания контекста алгоритма выработки имитовставки. */
 typedef int ( ak_function_mac_create ) ( ak_mac );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Инициализация ключа алгоритма выработки имитовставки hmac на основе streebog256. */
 int ak_mac_create_hmac_streebog256( ak_mac );
/*! \brief Инициализация ключа алгоритма выработки имитовставки hmac на основе streebog512. */
 int ak_mac_create_hmac_streebog512( ak_mac );
/*! \brief Инициализация ключа алгоритма выработки имитовставки hmac на основе gosthash94. */
 int ak_mac_create_hmac_gosthash94( ak_mac , ak_oid );
/*! \brief Инициализация ключа алгоритма выработки имитовставки hmac на основе gosthash94 с таблицами из RFC 4357. */
 int ak_mac_create_hmac_gosthash94_csp( ak_mac );
/*! \brief Инициализация ключа алгоритма выработки имитовставки на основе MGM-режима с использованием блочного шифра Кузнечик. */
 int ak_mac_create_mgm_kuznechik( ak_mac );
/*! \brief Инициализация ключа алгоритма выработки имитовставки на основе MGM-режима с использованием блочного шифра Магма. */
 int ak_mac_create_mgm_magma( ak_mac );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Инициализация ключа алгоритма выработки имитовставки ГОСТ Р 34.13-2015 с использованием блочного шифра Магма. */
 int ak_mac_create_gost3413_magma( ak_mac );
/*! \brief Инициализация ключа алгоритма выработки имитовставки ГОСТ Р 34.13-2015 с использованием блочного шифра Магма. */
 int ak_mac_create_gost3413_kuznechik( ak_mac );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Инициализация контекста ключа алгоритма выработки имитовставки по oid алгоритма. */
 int ak_mac_create_oid( ak_mac, ak_oid );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Уничтожение контекста ключа алгоритма выработки имитовставки hmac. */
 int ak_mac_destroy( ak_mac );
/*! \brief Освобождение памяти из под контекста ключа алгоритма выработки имитовставки hmac. */
 ak_pointer ak_mac_delete( ak_pointer );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Присвоение контексту ключа алгоритма выработки имитовставки константного значения. */
 int ak_mac_context_set_ptr( ak_mac , const ak_pointer , const size_t );
/*! \brief Присвоение контексту ключа алгоритма выработки имитовставки случайного значения. */
 int ak_mac_context_set_random( ak_mac , ak_random );
/*! \brief Присвоение контексту ключа алгоритма выработки имитовставки значения, выработанного из пароля. */
 int ak_mac_context_set_password( ak_mac , const ak_pointer , const size_t ,
                                                                const ak_pointer , const size_t );
/*! \brief Вычисление имитовставки для заданной области памяти известной длины. */
 ak_buffer ak_mac_context_ptr( ak_mac , const ak_pointer , const size_t , ak_pointer );
/*! \brief Вычисление имитовставки для заданного файла. */
 ak_buffer ak_mac_context_file( ak_mac , const char*, ak_pointer );

/* ----------------------------------------------------------------------------------------------- */
/*! Получение oid алгоритма выработки имитовставки */
 ak_oid ak_mac_context_get_oid( ak_mac );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Развертка ключевого вектора из пароля (согласно Р 50.1.111-2016, раздел 4) */
 int ak_hmac_pbkdf2_streebog512( const ak_pointer , const size_t ,
                   const ak_pointer , const size_t, const size_t , const size_t , ak_pointer );
/*! \brief Тестирование алгоритмов выработки имитовставки hmac с отечественными функциями хеширования. */
 ak_bool ak_hmac_test_streebog( void );
/*! \brief Тестирование алгоритма PBKDF2, регламентируемого Р 50.1.113-2016. */
 ak_bool ak_hmac_test_pbkdf2( void );

#endif
/* ----------------------------------------------------------------------------------------------- */
